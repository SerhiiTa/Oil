# app.py
# ============================
#  OIL ANALYZER v7 (stable)
#  –ò—Å—Ç–æ—á–Ω–∏–∫–∏: EIA, Baker Hughes, CFTC, Yahoo Finance, FRED
#  –ö–æ–º–∞–Ω–¥—ã: /help /summary /prices /eia /baker /cot /macro
#  –ú–∞—Ä—à—Ä—É—Ç—ã: /, /health, /data, /analyze, /cron/daily, /telegram
# ============================

import os
import sys
import json
import math
import time
import traceback
import concurrent.futures
from datetime import datetime, timezone, timedelta

import requests
import yfinance as yf
from bs4 import BeautifulSoup
from flask import Flask, jsonify, request

# ====== ENV ======
# –í—Å–µ –∫–ª—é—á–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!
EIA_API_KEY        = os.getenv("EIA_API_KEY", "")
FRED_API_KEY       = os.getenv("FRED_API_KEY", "")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY", "")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "")

# –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
REQUEST_TIMEOUT = 20
UA = {"User-Agent": "oil-analyzer/3.0 (+https://render.com)"}

# –ü–∞–º—è—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫—ç—à–∞
CACHE = {}

app = Flask(__name__)

# ====== helpers ======
def utc_now():
    return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")

def http_get(url):
    return requests.get(url, timeout=REQUEST_TIMEOUT, headers=UA)

def http_post(url, payload):
    return requests.post(url, json=payload, timeout=REQUEST_TIMEOUT, headers=UA)

# ====== cache ======
def get_cache(key):
    row = CACHE.get(key)
    if not row:
        return None
    if datetime.now(timezone.utc) > row["ts"] + timedelta(seconds=row["ttl"]):
        return None
    return row["data"]

def set_cache(key, data, ttl_sec):
    CACHE[key] = {"ts": datetime.now(timezone.utc), "ttl": ttl_sec, "data": data}

# ====== formatting ======
def _num(x, nd=2, default="N/A"):
    try:
        return f"{float(x):,.{nd}f}"
    except Exception:
        return default

def _pct(x, nd=2):
    try:
        return f"{float(x):+.{nd}f}%"
    except Exception:
        return f"{0:+.{nd}f}%"

# ====== telegram ======
def send_telegram(html_text, chat_id=None):
    if not TELEGRAM_BOT_TOKEN:
        return False
    chat_id = chat_id or TELEGRAM_CHAT_ID
    if not chat_id:
        return False
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": html_text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True,
        }
        r = http_post(url, payload)
        return r.ok
    except Exception:
        return False
        # ====== EIA ======
def get_eia_weekly():
    """
    Weekly EIA Petroleum Summary ‚Äî Crude Oil (EPC0)
    –ö—ç—à: 6 —á–∞—Å–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è Telegram.
    """
    if not EIA_API_KEY:
        return {"error": "EIA_API_KEY missing"}

    cached = get_cache("eia")
    if cached:
        return cached

    try:
        url = (
            "https://api.eia.gov/v2/petroleum/sum/sndw/data/"
            f"?api_key={EIA_API_KEY}"
            "&frequency=weekly"
            "&data[0]=value"
            "&facets[product][]=EPC0"
            "&sort[0][column]=period&sort[0][direction]=desc"
            "&offset=0&length=5"
        )

        js = http_get(url).json()
        records = (js.get("response") or {}).get("data") or []
        if not records:
            return {"error": "No EIA Crude Oil records found"}

        # ==== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π ====
        data = {}
        for r in records:
            sdesc = r.get("series-description", "")
            val = r.get("value")
            unit = r.get("units", "")
            if "Ending Stocks" in sdesc:
                data["stocks"] = (val, unit, sdesc)
            elif "Imports" in sdesc:
                data["imports"] = (val, unit, sdesc)
            elif "Production" in sdesc:
                data["production"] = (val, unit, sdesc)

        # ==== –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ====
        period = records[0].get("period", "N/A")
        report = (
            f"üõ¢ **EIA Crude Oil Weekly Report ({period})**\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

        if "stocks" in data:
            val, u, _ = data["stocks"]
            report += f"üì¶ **Stocks:** {val or 'N/A'} {u}\n"
        if "imports" in data:
            val, u, _ = data["imports"]
            report += f"üö¢ **Imports:** {val or 'N/A'} {u}\n"
        if "production" in data:
            val, u, _ = data["production"]
            report += f"‚öôÔ∏è **Production:** {val or 'N/A'} {u}\n"

        # ==== –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (AI Summary) ====
        analysis = "\nüìà **AI Summary:**\n"
        try:
            stocks_val = float(data.get("stocks", [0])[0] or 0)
            prod_val = float(data.get("production", [0])[0] or 0)
            if stocks_val > 420000:
                analysis += "‚Ä¢ High crude inventories may pressure prices slightly.\n"
            else:
                analysis += "‚Ä¢ Lower inventories support a bullish tone.\n"
            if prod_val > 400:
                analysis += "‚Ä¢ Production remains stable ‚Üí balanced market.\n"
            else:
                analysis += "‚Ä¢ Production decline supports upside potential.\n"
        except Exception:
            analysis += "‚Ä¢ Not enough data for full evaluation.\n"

        # ==== –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥ ====
        report += analysis
        result = {
            "period": period,
            "raw": data,
            "report": report
        }

        set_cache("eia", result, 21600)
        return result

    except Exception as e:
        return {"error": f"EIA fetch error: {e}"}

# ====== Baker Hughes ======
def get_baker_hughes():
    """
    –°–Ω–∏–ø–ø–µ—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã https://rigcount.bakerhughes.com/
    –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤; –∫—ç—à –Ω–∞ —Å—É—Ç–∫–∏.
    """
    cached = get_cache("baker")
    if cached:
        return cached
    try:
        html = http_get("https://rigcount.bakerhughes.com/").text
        soup = BeautifulSoup(html, "html.parser")
        txt = soup.get_text(" ", strip=True)
        # –ò—â–µ–º –±—ã—Å—Ç—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        anchors = ["U.S.", "Canada", "International", "Rig Count"]
        snippet = None
        for a in anchors:
            if a in txt:
                i = txt.find(a)
                snippet = txt[max(0, i - 80) : i + 300]
                break
        out = {"snippet": (snippet or txt[:400]).strip(), "source": "Baker Hughes (Rig Count)"}
    except Exception as e:
        out = {"error": f"baker: {e}"}
    set_cache("baker", out, 86400)
    return out

# ====== CFTC (Disaggregated Futures + Options) ======
CFTC_FUT = "https://www.cftc.gov/dea/futures/petroleum_lf.htm"
CFTC_FOP = "https://www.cftc.gov/dea/options/petroleum_lof.htm"

# –ù–∞–∑–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ –æ—Ç—á—ë—Ç–µ (–ø–æ —Ç–≤–æ–∏–º —Å–∫—Ä–∏–Ω–∞–º)
CFTC_KEYS = [
    "WTI‚ÄìPHYSICAL", "WTI-PHYSICAL", "WTI PHYSICAL",
    "WTI FINANCIAL CRUDE OIL",
    "BRENT LAST DAY",
    "GASOLINE RBOB",
    "NY HARBOR ULSD",
    "WTI HOUSTON ARGUS/WIT TR MO",
    "WTI MIDLAND ARGUS VS WTI TRADE",
    "USGC HSFO (PLATTS)",
]

def _cftc_extract(txt):
    # –û—á–∏—â–∞–µ–º —Å–ø–µ—Ü-–ø–µ—Ä–µ–Ω–æ—Å—ã
    t = txt.replace("\r", "").replace("\x00", "")
    found = []
    for key in CFTC_KEYS:
        if key in t:
            idx = t.find(key)
            block = t[max(0, idx-140): idx+1200]
            found.append(block.strip())
    return "\n\n".join(found) if found else ""

def get_cftc():
    """
    –¢—è–Ω–µ–º 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã (Futures Only + Futures&Options).
    –°–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ä–∞–∑–¥–µ–ª–∞–º.
    –ö—ç—à: —Å—É—Ç–∫–∏.
    """
    cached = get_cache("cftc")
    if cached:
        return cached
    try:
        res = []
        for url in (CFTC_FUT, CFTC_FOP):
            try:
                html = http_get(url).text
                soup = BeautifulSoup(html, "html.parser")
                txt = soup.get_text("\n", strip=True)
                chunk = _cftc_extract(txt)
                if chunk:
                    res.append(chunk)
            except Exception:
                continue
        snippet = "\n\n".join(res).strip() or "No petroleum sections parsed."
        out = {"snippet": snippet, "source": "CFTC Disaggregated (Fut/Fut+Opt)"}
    except Exception as e:
        out = {"error": f"cftc: {e}"}
    set_cache("cftc", out, 86400)
    return out

# ====== FRED (CPI, Fed Funds) ======
def get_fred():
    if not FRED_API_KEY:
        return {"error": "FRED_API_KEY missing"}
    cached = get_cache("fred")
    if cached:
        return cached
    try:
        u1 = f"https://api.stlouisfed.org/fred/series/observations?series_id=CPIAUCSL&api_key={FRED_API_KEY}&file_type=json"
        u2 = f"https://api.stlouisfed.org/fred/series/observations?series_id=FEDFUNDS&api_key={FRED_API_KEY}&file_type=json"
        cpi = http_get(u1).json()["observations"][-1]
        rate = http_get(u2).json()["observations"][-1]
        out = {"CPI": float(cpi["value"]), "CPI_date": cpi["date"], "FedRate": float(rate["value"]), "Rate_date": rate["date"]}
        set_cache("fred", out, 43200)
        return out
    except Exception as e:
        return {"error": f"fred: {e}"}

# ====== Yahoo Finance (WTI & DXY) ======
def _last_close_series(ticker, period="3d", interval="1h"):
    """
    –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–≤–µ—á—É.
    –°–Ω–∞—á–∞–ª–∞ Ticker().history, –∑–∞—Ç–µ–º fallback –Ω–∞ yf.download.
    """
    try:
        h = yf.Ticker(ticker).history(period=period, interval=interval)
        if h is None or h.dropna().empty:
            h = yf.download(ticker, period=period, interval=interval, progress=False)
        h = h.dropna()
        if len(h) >= 2:
            return float(h["Close"].iloc[-1]), float(h["Close"].iloc[-2])
        if len(h) == 1:
            v = float(h["Close"].iloc[-1])
            return v, v
    except Exception:
        pass
    return None, None

def get_prices():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'WTI', 'WTI_change', 'DXY', 'DXY_change'}.
    DXY –ø—Ä–æ–±—É–µ–º –ø–æ ^DXY, –∑–∞—Ç–µ–º DX-Y.NYB, –∑–∞—Ç–µ–º ETF UUP.
    –ö—ç—à: 10 –º–∏–Ω—É—Ç.
    """
    cached = get_cache("prices")
    if cached:
        # –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–∞–∑—É, –µ—Å–ª–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ (<10 –º–∏–Ω)
        return cached

    out = {"WTI": None, "WTI_change": None, "DXY": None, "DXY_change": None, "source": "Yahoo Finance"}

    w_last, w_prev = _last_close_series("CL=F")
    # —Ü–µ–ø–æ—á–∫–∞ —Ñ–æ–ª–ª–±–µ–∫–æ–≤ –ø–æ DXY
    d_last, d_prev = _last_close_series("^DXY")
    if d_last is None:
        d_last, d_prev = _last_close_series("DX-Y.NYB")
    if d_last is None:
        d_last, d_prev = _last_close_series("UUP")  # ETF Dollar Index

    if w_last is not None and w_prev is not None:
        out["WTI"] = round(w_last, 2)
        out["WTI_change"] = round((w_last - w_prev) / w_prev * 100, 2) if w_prev else 0.0
    if d_last is not None and d_prev is not None:
        out["DXY"] = round(d_last, 2)
        out["DXY_change"] = round((d_last - d_prev) / d_prev * 100, 2) if d_prev else 0.0

    # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—ç—à, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (out["WTI"] is None and out["DXY"] is None) and cached:
        return cached

    set_cache("prices", out, 600)
    return out
    # ====== AI (OpenAI) ======
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º gpt-4o-mini ‚Äî –±—ã—Å—Ç—Ä–µ–µ –∏ –¥–µ—à–µ–≤–ª–µ.
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

def gpt_analyze(payload, prices):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Å–≤–æ–¥–∫–∏.
    –ï—Å–ª–∏ API-–∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë–º –∫—Ä–∞—Ç–∫–∏–π rule-based –ø–ª–∞–Ω.
    """
    # –ë—ç–∫–∞–ø-–ª–æ–≥–∏–∫–∞ –±–µ–∑ GPT (—á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª –ø–ª–∞–Ω)
    def rule_based():
        px = prices or {}
        wti = px.get("WTI")
        ch = px.get("WTI_change")
        dxy = px.get("DXY_change")
        # –ø—Ä–æ—Å—Ç–∞—è –µ–≤–∫–∞–ª–∏–ø—Ç–∏–∫–∞: WTI‚Üë & DXY‚Üì ‚Üí BUY, –∏–Ω–∞—á–µ SELL, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Üí NEUTRAL
        if wti is None:
            rec = "NEUTRAL"
        else:
            score = (ch or 0) - (dxy or 0)
            rec = "BUY" if score > 0 else "SELL" if score < 0 else "NEUTRAL"
        # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–∞—Ä–≥–µ—Ç/—Å—Ç–æ–ø
        if wti:
            vol = max(abs(ch or 0), 0.6) / 100.0  # –≥—Ä—É–±–∞—è ¬´–≤–æ–ª–∞¬ª –æ—Ç % –∏–∑–º–µ–Ω–µ–Ω–∏—è
            tgt = wti * (1 + (0.018 if rec == "BUY" else -0.018))  # ~1.8%
            stp = wti * (1 - (0.009 if rec == "BUY" else -0.009))  # ~0.9% –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
            tgt = round(tgt, 2)
            stp = round(stp, 2)
        else:
            tgt = stp = None

        lines = [
            f"üî¥ <b>EIA Oil Report Analysis</b>",
            f"üéØ <b>{rec}</b>",
            f"üí∞ –¶–µ–Ω–∞ WTI: {('$'+_num(wti)) if wti else 'N/A'}",
            "",
            "<b>–¢–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω:</b>",
            f"üéØ –¶–µ–ª—å: {('$'+_num(tgt)) if tgt else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}",
            f"‚õî –°—Ç–æ–ø: {('$'+_num(stp)) if stp else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}",
        ]
        return "\n".join(lines)

    if not OPENAI_API_KEY:
        return rule_based()

    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)

        prompt = (
            "–¢—ã –∫—Ä–∞—Ç–∫–æ –∏ —á—ë—Ç–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ä—ã–Ω–æ–∫ –Ω–µ—Ñ—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–∫—Ç—ã –∏–∑ –±–ª–æ–∫–æ–≤ –Ω–∏–∂–µ –∏ –≤—ã–¥–∞–π:\n"
            "1) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é BUY/SELL/NEUTRAL\n"
            "2) –¢–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω: —Ü–µ–ª—å –∏ —Å—Ç–æ–ø (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ, –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É WTI)\n"
            "3) 2‚Äì4 —Ñ–∞–∫—Ç–æ—Ä–∞ (–±—É–ª–ª–µ—Ç—ã) –ø–æ EIA/Baker/CFTC/Macro/Prices\n"
            "4) –ö–æ—Ä–æ—Ç–∫–∏–π –∏—Ç–æ–≥ –Ω–∞ 24‚Äì72 —á–∞—Å–∞.\n\n"
            "–î–∞–Ω–Ω—ã–µ:\n"
            + json.dumps(payload, ensure_ascii=False)
        )

        msg = [
            {"role": "system", "content": "–¢—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ö–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": prompt},
        ]
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=msg,
            temperature=0.25,
            max_tokens=600,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"GPT error: {e}"

# ====== message formatting ======
def fmt_prices(pr):
    w = _num(pr.get("WTI"))
    wc = _pct(pr.get("WTI_change"))
    d = _num(pr.get("DXY"))
    dc = _pct(pr.get("DXY_change"))
    return (
        "üíπ <b>DXY & WTI update</b>\n"
        f"üïí {utc_now()}\n\n"
        f"üõ¢ WTI: <b>${w}</b> (24h {wc})\n"
        f"üíµ DXY: <b>{d}</b> (24h {dc})"
    )

def fmt_summary(payload, analysis=None):
    lines = [f"üßæ <b>Oil Report: SUMMARY</b>", f"üïí {utc_now()}"]

    # EIA
        # ====== EIA ======
    eia = payload.get("eia") or {}
    if isinstance(eia, dict) and "raw" in eia:
        raw = eia["raw"]
        period = eia.get("period", "N/A")

        stocks_val = raw.get("stocks", ["N/A", ""])[0]
        imports_val = raw.get("imports", ["N/A", ""])[0]
        prod_val = raw.get("production", ["N/A", ""])[0]
        stocks_unit = raw.get("stocks", ["", ""])[1]
        imports_unit = raw.get("imports", ["", ""])[1]
        prod_unit = raw.get("production", ["", ""])[1]

        # sentiment logic
        try:
            s_val = float(stocks_val)
            p_val = float(prod_val)
            if s_val > 820000 and p_val > 400:
                sentiment = "üü• <b>Bearish:</b> High inventories & steady output may pressure prices."
            elif s_val < 780000 and p_val < 400:
                sentiment = "üü© <b>Bullish:</b> Falling stocks & reduced output support upside."
            else:
                sentiment = "‚ö™ <b>Neutral:</b> Balanced crude market."
        except Exception:
            sentiment = "‚ö™ <b>Neutral:</b> Data incomplete."

        lines += [
            "\nüì¶ <b>EIA Weekly Crude Snapshot</b>",
            f"‚Ä¢ Period: {period}",
            f"‚Ä¢ Stocks: {_num(stocks_val)} {stocks_unit}",
            f"‚Ä¢ Imports: {_num(imports_val)} {imports_unit}",
            f"‚Ä¢ Production: {_num(prod_val)} {prod_unit}",
            f"{sentiment}",
        ]
    else:
        lines += [
            "\nüì¶ <b>EIA</b>",
            "‚Ä¢ Period: N/A",
            "‚Ä¢ Region: U.S. or PADD",
            "‚Ä¢ Product: N/A",
            "‚Ä¢ Value: N/A",
        ]

    # Baker
    b = payload.get("baker") or {}
    if b.get("snippet"):
        s = b["snippet"].strip()
        s = (s[:400] + "‚Ä¶") if len(s) > 400 else s
        lines += ["", "üèóÔ∏è <b>Baker Hughes</b>", s]

    # CFTC
    c = payload.get("cftc") or {}
    if c.get("snippet"):
        s = c["snippet"].strip()
        s = (s[:800] + "‚Ä¶") if len(s) > 800 else s
        lines += ["", "üìä <b>CFTC</b>", f"<code>{s}</code>"]

    # Macro
    m = payload.get("fred") or {}
    if m and "CPI" in m:
        lines += [
            "", "üè¶ <b>Macro (FRED)</b>",
            f"‚Ä¢ CPI: {_num(m.get('CPI'))}",
            f"‚Ä¢ Fed Funds: {_num(m.get('FedRate'))}%",
        ]

    # Market
    p = payload.get("prices") or {}
    lines += [
        "", "üíπ <b>Market</b>",
        f"üõ¢ WTI: ${_num(p.get('WTI'))} (24h {_pct(p.get('WTI_change'))})",
        f"üíµ DXY: {_num(p.get('DXY'))} (24h {_pct(p.get('DXY_change'))})",
    ]

    if analysis:
        lines += ["", "üß† <b>AI Analysis</b>", analysis]

    return "\n".join(lines)
    # ====== —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ======
def collect(mode="summary"):
    mode = (mode or "summary").lower()
    data = {"timestamp": utc_now(), "mode": mode}

    jobs = []
    if mode in ("summary", "prices"): jobs.append(("prices", get_prices))
    if mode in ("summary", "eia"):    jobs.append(("eia", get_eia_weekly))
    if mode in ("summary", "baker"):  jobs.append(("baker", get_baker_hughes))
    if mode in ("summary", "cftc", "cot"):    jobs.append(("cftc", get_cftc))
    if mode in ("summary", "macro", "fred"):  jobs.append(("fred", get_fred))

    with concurrent.futures.ThreadPoolExecutor(max_workers=6) as ex:
        futs = {ex.submit(fn): key for key, fn in jobs}
        for f in concurrent.futures.as_completed(futs):
            k = futs[f]
            try:
                data[k] = f.result()
            except Exception as e:
                data[k] = {"error": f"{k}: {e}"}
    return data

def run_once(mode="summary", chat_id=None):
    payload = collect(mode)
    analysis = None
    if mode == "summary":
        analysis = gpt_analyze(payload, payload.get("prices") or {})
    msg = fmt_summary(payload, analysis)
    ok = send_telegram(msg, chat_id=chat_id)
    return {"ok": True, "sent": ok, "payload": payload, "analysis": analysis}

# ====== ROUTES ======
@app.route("/")
def index():
    return jsonify({"ok": True, "message": "Oil Analyzer Bot is running", "time": utc_now()})

@app.route("/health")
def health():
    return jsonify({"ok": True, "time": utc_now()})

@app.route("/data")
def data_endpoint():
    mode = request.args.get("mode", "summary")
    return jsonify(collect(mode))

@app.route("/analyze")
def analyze_endpoint():
    mode = request.args.get("mode", "summary")
    return jsonify(run_once(mode))

@app.route("/cron/daily")
def cron_daily():
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–∞. –ü–æ —É—Å–ª–æ–≤–∏—é: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 08:00 America/Chicago.
    –†–µ–Ω–¥–µ—Ä-—Ç—Ä–∏–≥–≥–µ—Ä: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CRON –≤ Render –Ω–∞ 13:00 UTC (–ª–µ—Ç–æ–º) / 14:00 UTC (–∑–∏–º–æ–π) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–≥–∞—Ç—å —ç—Ç–æ—Ç URL.
    """
    res = run_once("summary", chat_id=TELEGRAM_CHAT_ID)
    return jsonify({"ok": True, "result": res})

# ====== TELEGRAM WEBHOOK ======
@app.route("/telegram", methods=["POST"])
def telegram_webhook():
    try:
        upd = request.get_json(force=True, silent=True) or {}
        msg = upd.get("message") or upd.get("edited_message") or {}
        chat_id = str(msg.get("chat", {}).get("id", "")) or TELEGRAM_CHAT_ID
        text = (msg.get("text") or "").strip().lower()

        if text in ("/start", "/help"):
            help_txt = (
                "üõ¢ <b>Oil Analyzer Bot</b>\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /summary ‚Äî –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç (EIA, Baker, CFTC, Macro, Market, AI)\n"
                "‚Ä¢ /prices ‚Äî –±—ã—Å—Ç—Ä—ã–π –∞–ø–¥–µ–π—Ç WTI & DXY\n"
                "‚Ä¢ /eia ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π weekly-—Å—Ä–µ–∑ EIA\n"
                "‚Ä¢ /baker ‚Äî —Å–Ω–∏–ø–ø–µ—Ç Baker Hughes\n"
                "‚Ä¢ /cot ‚Äî CFTC petroleum (disaggregated) —Å–Ω–∏–ø–ø–µ—Ç\n"
                "‚Ä¢ /macro ‚Äî CPI & FedRate (FRED)\n"
                "\n‚è∞ –ê–≤—Ç–æ–æ—Ç—á—ë—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 08:00 America/Chicago (—á–µ—Ä–µ–∑ Render CRON)."
            )
            send_telegram(help_txt, chat_id=chat_id)
            return jsonify({"ok": True})

        if text.startswith("/prices"):
            pr = get_prices()
            send_telegram(fmt_prices(pr), chat_id=chat_id)
            return jsonify({"ok": True})

        if text.startswith("/summary"):
            res = run_once("summary", chat_id=chat_id)
            return jsonify({"ok": True, "result": res})

if text.startswith("/eia"):
    e = get_eia_weekly()
    if "error" in e:
        send_telegram(f"‚ö†Ô∏è {e['error']}", chat_id=chat_id)
    else:
        send_telegram(e.get("report", "No EIA data available."), chat_id=chat_id)
    return jsonify({"ok": True})

        if text.startswith("/baker"):
            b = get_baker_hughes()
            send_telegram(f"Baker raw:\n<code>{json.dumps(b, ensure_ascii=False)}</code>", chat_id=chat_id)
            return jsonify({"ok": True})

        if text.startswith("/cot"):
            c = get_cftc()
            send_telegram(f"CFTC raw:\n<code>{(c.get('snippet') or '')[:3900]}</code>", chat_id=chat_id)
            return jsonify({"ok": True})

        if text.startswith("/macro"):
            m = get_fred()
            send_telegram(f"FRED raw:\n<code>{json.dumps(m, ensure_ascii=False)}</code>", chat_id=chat_id)
            return jsonify({"ok": True})

        send_telegram("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help", chat_id=chat_id)
        return jsonify({"ok": True})

    except Exception as e:
        # –Ω–µ —Ä–æ–Ω—è–µ–º –≤–µ–±—Ö—É–∫ ‚Äî –≤—Å–µ–≥–¥–∞ 200
        send_telegram(f"Internal error:\n<code>{traceback.format_exc()[:1500]}</code>")
        return jsonify({"ok": False, "error": str(e)}), 200

# ====== RUN ======
if __name__ == "__main__":
    if len(sys.argv) > 1:
        # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: python app.py summary
        mode = sys.argv[1].lower()
        print(json.dumps(run_once(mode), ensure_ascii=False, indent=2))
    else:
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")), debug=False)
        
