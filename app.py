# app.py
# ============================
#  OIL ANALYZER v7 (stable)
#  –ò—Å—Ç–æ—á–Ω–∏–∫–∏: EIA, Baker Hughes, CFTC, Yahoo Finance, FRED
#  –ö–æ–º–∞–Ω–¥—ã: /help /summary /prices /eia /baker /cot /macro
#  –ú–∞—Ä—à—Ä—É—Ç—ã: /, /health, /data, /analyze, /cron/daily, /telegram
# ============================

import os
import sys
import json
import math
import time
import re
import traceback
import concurrent.futures
from datetime import datetime, timezone, timedelta

import requests
import yfinance as yf
from bs4 import BeautifulSoup
from flask import Flask, jsonify, request

# ====== ENV ======
# –í—Å–µ –∫–ª—é—á–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!
EIA_API_KEY        = os.getenv("EIA_API_KEY", "")
FRED_API_KEY       = os.getenv("FRED_API_KEY", "")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY", "")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "")

# –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
REQUEST_TIMEOUT = 40
UA = {"User-Agent": "oil-analyzer/3.0 (+https://render.com)"}

# –ü–∞–º—è—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫—ç—à–∞
CACHE = {}

app = Flask(__name__)

# ====== helpers ======
def utc_now():
    return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")

def http_get(url):
    return requests.get(url, timeout=REQUEST_TIMEOUT, headers=UA)

def http_post(url, payload):
    return requests.post(url, json=payload, timeout=REQUEST_TIMEOUT, headers=UA)

# ====== cache ======
def get_cache(key):
    row = CACHE.get(key)
    if not row:
        return None
    if datetime.now(timezone.utc) > row["ts"] + timedelta(seconds=row["ttl"]):
        return None
    return row["data"]

def set_cache(key, data, ttl_sec):
    CACHE[key] = {"ts": datetime.now(timezone.utc), "ttl": ttl_sec, "data": data}

# ====== formatting ======
def _num(x, nd=2, default="N/A"):
    try:
        return f"{float(x):,.{nd}f}"
    except Exception:
        return default

def _pct(x, nd=2):
    try:
        return f"{float(x):+.{nd}f}%"
    except Exception:
        return f"{0:+.{nd}f}%"

# ====== telegram ======
def send_telegram(html_text, chat_id=None):
    if not TELEGRAM_BOT_TOKEN:
        return False
    chat_id = chat_id or TELEGRAM_CHAT_ID
    if not chat_id:
        return False
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": html_text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True,
        }
        r = http_post(url, payload)
        return r.ok
    except Exception:
        return False
        # ====== EIA ======
def get_eia_weekly():
    """
    Weekly EIA Petroleum Summary ‚Äî Crude Oil (EPC0)
    –ö—ç—à: 6 —á–∞—Å–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è Telegram.
    """
    if not EIA_API_KEY:
        return {"error": "EIA_API_KEY missing"}

    cached = get_cache("eia")
    if cached:
        return cached

    try:
        url = (
            "https://api.eia.gov/v2/petroleum/sum/sndw/data/"
            f"?api_key={EIA_API_KEY}"
            "&frequency=weekly"
            "&data[0]=value"
            "&facets[product][]=EPC0"
            "&sort[0][column]=period&sort[0][direction]=desc"
            "&offset=0&length=5"
        )

        js = http_get(url).json()
        records = (js.get("response") or {}).get("data") or []
        if not records:
            return {"error": "No EIA Crude Oil records found"}

        # ==== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π ====
        data = {}
        for r in records:
            sdesc = r.get("series-description", "")
            val = r.get("value")
            unit = r.get("units", "")
            if "Ending Stocks" in sdesc:
                data["stocks"] = (val, unit, sdesc)
            elif "Imports" in sdesc:
                data["imports"] = (val, unit, sdesc)
            elif "Production" in sdesc:
                data["production"] = (val, unit, sdesc)

        # ==== –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ====
        period = records[0].get("period", "N/A")
        report = (
            f"üõ¢ **EIA Crude Oil Weekly Report ({period})**\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

        if "stocks" in data:
            val, u, _ = data["stocks"]
            report += f"üì¶ **Stocks:** {val or 'N/A'} {u}\n"
        if "imports" in data:
            val, u, _ = data["imports"]
            report += f"üö¢ **Imports:** {val or 'N/A'} {u}\n"
        if "production" in data:
            val, u, _ = data["production"]
            report += f"‚öôÔ∏è **Production:** {val or 'N/A'} {u}\n"

        # ==== –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (AI Summary) ====
        analysis = "\nüìà **AI Summary:**\n"
        try:
            stocks_val = float(data.get("stocks", [0])[0] or 0)
            prod_val = float(data.get("production", [0])[0] or 0)
            if stocks_val > 420000:
                analysis += "‚Ä¢ High crude inventories may pressure prices slightly.\n"
            else:
                analysis += "‚Ä¢ Lower inventories support a bullish tone.\n"
            if prod_val > 400:
                analysis += "‚Ä¢ Production remains stable ‚Üí balanced market.\n"
            else:
                analysis += "‚Ä¢ Production decline supports upside potential.\n"
        except Exception:
            analysis += "‚Ä¢ Not enough data for full evaluation.\n"

        # ==== –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥ ====
        report += analysis
        result = {
            "period": period,
            "raw": data,
            "report": report
        }

        set_cache("eia", result, 21600)
        return result

    except Exception as e:
        return {"error": f"EIA fetch error: {e}"}

# ====== Baker Hughes ======
# ====== Baker Hughes ======
import re

def get_baker_hughes():
    """
    –°–Ω–∏–ø–ø–µ—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã https://rigcount.bakerhughes.com/
    –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤; –∫—ç—à –Ω–∞ —Å—É—Ç–∫–∏.
    –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å U.S./Canada/International –∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    cached = get_cache("baker")
    if cached:
        return cached

    try:
        html = http_get("https://rigcount.bakerhughes.com/").text
        soup = BeautifulSoup(html, "html.parser")
        txt = soup.get_text(" ", strip=True)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        txt_norm = re.sub(r"\s+", " ", txt)

        # –ò—â–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–æ–∫—Ä—É–≥ –∫–ª—é—á–µ–π
        anchors = ["U.S.", "Canada", "International", "Rig Count"]
        snippet = None
        for a in anchors:
            if a in txt_norm:
                i = txt_norm.find(a)
                snippet = txt_norm[max(0, i - 80): i + 320]
                break
        snippet = (snippet or txt_norm[:400]).strip()

        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —á–∏—Å–ª–∞ –∏ –¥–µ–ª—å—Ç—ã
        # –ü—Ä–∏–º–µ—Ä —à–∞–±–ª–æ–Ω–∞: "U.S. 17 Oct 2025 548 +1"
        rec = {
            "us": None, "us_delta": None,
            "canada": None, "canada_delta": None,
            "intl": None, "intl_delta": None,
            "as_of": None
        }

        m_us = re.search(r"U\.S\.\s+(\d{1,2}\s+\w+\s+\d{4})\s+(\d+)\s+([+\-]\d+)", txt_norm)
        if m_us:
            rec["as_of"] = rec["as_of"] or m_us.group(1)
            rec["us"] = int(m_us.group(2)); rec["us_delta"] = int(m_us.group(3))

        m_ca = re.search(r"Canada\s+(\d{1,2}\s+\w+\s+\d{4})\s+(\d+)\s+([+\-]\d+)", txt_norm)
        if m_ca:
            rec["as_of"] = rec["as_of"] or m_ca.group(1)
            rec["canada"] = int(m_ca.group(2)); rec["canada_delta"] = int(m_ca.group(3))

        m_int = re.search(r"International\s+([A-Z][a-z]{2,9}\s+\d{4})\s+(\d+)\s+([+\-]\d+)", txt_norm)
        if m_int:
            # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –±–ª–æ–∫ —á–∞—Å—Ç–æ –ø–æ–º–µ—Å—è—á–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Sept 2025")
            rec["intl"] = int(m_int.group(2)); rec["intl_delta"] = int(m_int.group(3))

        # –°–µ–Ω—Ç–∏–º–µ–Ω—Ç: –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ U.S. –¥–µ–ª—å—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if rec["us_delta"] is not None:
            if rec["us_delta"] > 0:
                sentiment = "üü• Bearish ‚Äî —Ä–æ—Å—Ç —á–∏—Å–ª–∞ –≤—ã—à–µ–∫ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ—Ñ—Ç–∏."
            elif rec["us_delta"] < 0:
                sentiment = "üü© Bullish ‚Äî —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—ã—à–µ–∫ –º–æ–∂–µ—Ç —Å–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
            else:
                sentiment = "‚ö™ Neutral ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞ –≤—ã—à–µ–∫."
        else:
            sentiment = "‚ö™ Neutral ‚Äî –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–µ–ª—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."

        out = {
            "snippet": snippet,
            "source": "Baker Hughes (Rig Count)",
            "as_of": rec["as_of"],
            "us": rec["us"], "us_delta": rec["us_delta"],
            "canada": rec["canada"], "canada_delta": rec["canada_delta"],
            "intl": rec["intl"], "intl_delta": rec["intl_delta"],
            "sentiment": sentiment,
        }
    except Exception as e:
        out = {"error": f"baker: {e}"}

    # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ —Å—É—Ç–∫–∏ (–¥–∞–∂–µ –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ —á–∞—Å—Ç–∏—á–Ω—ã–π ‚Äî –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è)
    set_cache("baker", out, 86400)
    return out

# ====== CFTC (Disaggregated Futures + Options) ======
CFTC_FUT = "https://www.cftc.gov/dea/futures/petroleum_lf.htm"
CFTC_FOP = "https://www.cftc.gov/dea/options/petroleum_lof.htm"

# –ù–∞–∑–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ –æ—Ç—á—ë—Ç–µ (–ø–æ —Ç–≤–æ–∏–º —Å–∫—Ä–∏–Ω–∞–º)
CFTC_KEYS = [
    "WTI‚ÄìPHYSICAL", "WTI-PHYSICAL", "WTI PHYSICAL",
    "WTI FINANCIAL CRUDE OIL",
    "BRENT LAST DAY",
    "GASOLINE RBOB",
    "NY HARBOR ULSD",
    "WTI HOUSTON ARGUS/WIT TR MO",
    "WTI MIDLAND ARGUS VS WTI TRADE",
    "USGC HSFO (PLATTS)",
]

def _cftc_extract(txt):
    # –û—á–∏—â–∞–µ–º —Å–ø–µ—Ü-–ø–µ—Ä–µ–Ω–æ—Å—ã
    t = txt.replace("\r", "").replace("\x00", "")
    found = []
    for key in CFTC_KEYS:
        if key in t:
            idx = t.find(key)
            block = t[max(0, idx-140): idx+1200]
            found.append(block.strip())
    return "\n\n".join(found) if found else ""

def get_cftc():
    """
    –¢—è–Ω–µ–º 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã (Futures Only + Futures&Options).
    –°–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ä–∞–∑–¥–µ–ª–∞–º.
    –ö—ç—à: —Å—É—Ç–∫–∏.
    """
    cached = get_cache("cftc")
    if cached:
        return cached
    try:
        res = []
        for url in (CFTC_FUT, CFTC_FOP):
            try:
                html = http_get(url).text
                soup = BeautifulSoup(html, "html.parser")
                txt = soup.get_text("\n", strip=True)
                chunk = _cftc_extract(txt)
                if chunk:
                    res.append(chunk)
            except Exception:
                continue
        snippet = "\n\n".join(res).strip() or "No petroleum sections parsed."
        out = {"snippet": snippet, "source": "CFTC Disaggregated (Fut/Fut+Opt)"}
    except Exception as e:
        out = {"error": f"cftc: {e}"}
    set_cache("cftc", out, 86400)
    return out

# ====== FRED (CPI, Fed Funds) ======
def get_fred():
    if not FRED_API_KEY:
        return {"error": "FRED_API_KEY missing"}
    cached = get_cache("fred")
    if cached:
        return cached
    try:
        u1 = f"https://api.stlouisfed.org/fred/series/observations?series_id=CPIAUCSL&api_key={FRED_API_KEY}&file_type=json"
        u2 = f"https://api.stlouisfed.org/fred/series/observations?series_id=FEDFUNDS&api_key={FRED_API_KEY}&file_type=json"
        cpi = http_get(u1).json()["observations"][-1]
        rate = http_get(u2).json()["observations"][-1]
        out = {"CPI": float(cpi["value"]), "CPI_date": cpi["date"], "FedRate": float(rate["value"]), "Rate_date": rate["date"]}
        set_cache("fred", out, 43200)
        return out
    except Exception as e:
        return {"error": f"fred: {e}"}

# ====== Yahoo Finance (WTI & DXY) ======
def _last_close_series(ticker, period="3d", interval="1h"):
    """
    –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–≤–µ—á—É.
    –°–Ω–∞—á–∞–ª–∞ Ticker().history, –∑–∞—Ç–µ–º fallback –Ω–∞ yf.download.
    """
    try:
        h = yf.Ticker(ticker).history(period=period, interval=interval)
        if h is None or h.dropna().empty:
            h = yf.download(ticker, period=period, interval=interval, progress=False)
        h = h.dropna()
        if len(h) >= 2:
            return float(h["Close"].iloc[-1]), float(h["Close"].iloc[-2])
        if len(h) == 1:
            v = float(h["Close"].iloc[-1])
            return v, v
    except Exception:
        pass
    return None, None

def get_prices():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'WTI', 'WTI_change', 'DXY', 'DXY_change'}.
    DXY –ø—Ä–æ–±—É–µ–º –ø–æ ^DXY, –∑–∞—Ç–µ–º DX-Y.NYB, –∑–∞—Ç–µ–º ETF UUP.
    –ö—ç—à: 10 –º–∏–Ω—É—Ç.
    """
    cached = get_cache("prices")
    if cached:
        # –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–∞–∑—É, –µ—Å–ª–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ (<10 –º–∏–Ω)
        return cached

    out = {"WTI": None, "WTI_change": None, "DXY": None, "DXY_change": None, "source": "Yahoo Finance"}

    w_last, w_prev = _last_close_series("CL=F")
    # —Ü–µ–ø–æ—á–∫–∞ —Ñ–æ–ª–ª–±–µ–∫–æ–≤ –ø–æ DXY
    d_last, d_prev = _last_close_series("^DXY")
    if d_last is None:
        d_last, d_prev = _last_close_series("DX-Y.NYB")
    if d_last is None:
        d_last, d_prev = _last_close_series("UUP")  # ETF Dollar Index

    if w_last is not None and w_prev is not None:
        out["WTI"] = round(w_last, 2)
        out["WTI_change"] = round((w_last - w_prev) / w_prev * 100, 2) if w_prev else 0.0
    if d_last is not None and d_prev is not None:
        out["DXY"] = round(d_last, 2)
        out["DXY_change"] = round((d_last - d_prev) / d_prev * 100, 2) if d_prev else 0.0

    # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—ç—à, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (out["WTI"] is None and out["DXY"] is None) and cached:
        return cached

    set_cache("prices", out, 600)
    return out
    # ====== AI (OpenAI) ======
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º gpt-4o-mini ‚Äî –±—ã—Å—Ç—Ä–µ–µ –∏ –¥–µ—à–µ–≤–ª–µ.
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

# ====== CFTC ANALYSIS MODULE (ADD-ON) ======
import re

def analyze_cftc_snippet(snippet: str) -> str:
    """
    –ú–∏–Ω–∏-–∞–Ω–∞–ª–∏–∑ CFTC –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —á–∏—Å–ª–∞ (Producers, Managed Money Long/Short) –∏ –¥–µ–ª–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.
    """
    if not snippet:
        return "CFTC: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    # –ò—â–µ–º –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ producers, long, short)
    nums = re.findall(r"([\d\.]+)", snippet)
    if len(nums) < 3:
        return "CFTC: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–∑–∏—Ü–∏–∏."

    try:
        producers = float(nums[0])
        money_long = float(nums[1])
        money_short = float(nums[2])
        diff = money_long - money_short

        if diff > 10:
            sentiment = "üü© Bullish ‚Äî —Ñ–æ–Ω–¥—ã –Ω–∞—Ä–∞—â–∏–≤–∞—é—Ç –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏."
        elif diff < -10:
            sentiment = "üü• Bearish ‚Äî —Ñ–æ–Ω–¥—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏."
        else:
            sentiment = "‚ö™ Neutral ‚Äî –±–∞–ª–∞–Ω—Å –¥–ª–∏–Ω–Ω—ã—Ö –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π."

        return (
            f"üìä <b>CFTC Snapshot</b>\n"
            f"‚Ä¢ Producers: {producers:.1f}%\n"
            f"‚Ä¢ Managed Money (Long): {money_long:.1f}%\n"
            f"‚Ä¢ Managed Money (Short): {money_short:.1f}%\n"
            f"{sentiment}"
        )
    except Exception as e:
        return f"CFTC parsing error: {e}"


def gpt_analyze_cftc(full_text: str) -> str:
    """
    –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ–≥–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ CFTC.
    GPT —Å–∞–º –¥–µ–ª–∞–µ—Ç –≤—ã–≤–æ–¥ –æ –¥–∏–Ω–∞–º–∏–∫–µ –¥–ª–∏–Ω–Ω—ã—Ö/–∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö.
    """
    if not OPENAI_API_KEY:
        return "‚ö†Ô∏è –ù–µ—Ç –∫–ª—é—á–∞ OpenAI. GPT-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

    from openai import OpenAI
    client = OpenAI(api_key=OPENAI_API_KEY)

    prompt = (
        "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞ –Ω–µ—Ñ—Ç–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ CFTC "
        "(Commitments of Traders) –ø–æ –Ω–µ—Ñ—Ç–∏ WTI.\n"
        "–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π Managed Money –∏ Producers –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π, "
        "—Å–¥–µ–ª–∞–π –≤—ã–≤–æ–¥ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ä—ã–Ω–∫–∞ (Bullish / Bearish / Neutral) –∏ –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é.\n\n"
        "–û—Ç—á—ë—Ç:\n" + full_text
    )

    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ CFTC. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –≤ –≤–∏–¥–µ –æ—Ç—á—ë—Ç–∞."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.3,
            max_tokens=600,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"GPT error: {e}"

# ====== ROUTES ======
@app.route("/")
def index():
    return jsonify({"ok": True, "message": "Oil Analyzer Bot is running", "time": utc_now()})

@app.route("/health")
def health():
    return jsonify({"ok": True, "time": utc_now()})

@app.route("/data")
def data_endpoint():
    mode = request.args.get("mode", "summary")
    return jsonify(collect(mode))

@app.route("/analyze")
def analyze_endpoint():
    mode = request.args.get("mode", "summary")
    return jsonify(run_once(mode))

@app.route("/cron/daily")
def cron_daily():
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–∞. –ü–æ —É—Å–ª–æ–≤–∏—é: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 08:00 America/Chicago.
    –†–µ–Ω–¥–µ—Ä-—Ç—Ä–∏–≥–≥–µ—Ä: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CRON –≤ Render –Ω–∞ 13:00 UTC (–ª–µ—Ç–æ–º) / 14:00 UTC (–∑–∏–º–æ–π) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–≥–∞—Ç—å —ç—Ç–æ—Ç URL.
    """
    res = run_once("summary", chat_id=TELEGRAM_CHAT_ID)
    return jsonify({"ok": True, "result": res})
# ===== FORMAT PRICES =====
def fmt_prices(pr):
    if not pr:
        return "üíπ Market data unavailable."

    wti = pr.get("WTI")
    dxy = pr.get("DXY")
    wti_ch = pr.get("WTI_change")
    dxy_ch = pr.get("DXY_change")

    lines = [
        "üíπ <b>Market Update</b>",
        f"üõ¢ WTI: ${_num(wti)} (24h {_pct(wti_ch)})",
        f"üíµ DXY: {_num(dxy)} (24h {_pct(dxy_ch)})",
    ]
    return "\n".join(lines)
# ====== TELEGRAM WEBHOOK ======
@app.route("/telegram", methods=["POST"])
def telegram_webhook():
    try:
        upd = request.get_json(force=True, silent=True) or {}
        msg = upd.get("message") or upd.get("edited_message") or {}
        chat_id = str(msg.get("chat", {}).get("id", "")) or TELEGRAM_CHAT_ID
        text = (msg.get("text") or "").strip().lower()

        if text in ("/start", "/help"):
            help_txt = (
                "üõ¢ <b>Oil Analyzer Bot ‚Äî –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã:</b>\n"
                "‚Ä¢ /summary ‚Äî –ø–æ–ª–Ω—ã–π AI-–æ—Ç—á—ë—Ç (EIA, Baker, CFTC, Macro, Prices)\n"
                "‚Ä¢ /prices ‚Äî –±—ã—Å—Ç—Ä—ã–π –∞–ø–¥–µ–π—Ç –ø–æ WTI –∏ DXY\n\n"
                "üßæ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
                "‚Ä¢ /eia ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç EIA (Weekly Petroleum Status)\n"
                "‚Ä¢ /baker ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ Baker Hughes (–±—É—Ä–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏)\n"
                "‚Ä¢ /cot ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π CFTC raw-—Å—Ä–µ–∑\n"
                "‚Ä¢ /cot_full ‚Äî –ø–æ–ª–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑ CFTC (Commitments of Traders)\n"
                "‚Ä¢ /macro ‚Äî –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞ (CPI, Fed Funds Rate)\n\n"
                "ü§ñ <b>AI –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
                "‚Ä¢ –ê–≤—Ç–æ–æ—Ç—á—ë—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 08:00 America/Chicago (—á–µ—Ä–µ–∑ Render CRON)\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å <code>gpt-4o-mini</code> —Å –Ω–∏–∑–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)\n\n"
                "üí¨ <b>–°–æ–≤–µ—Ç—ã:</b>\n"
                "‚Äî –ö–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (/Summary = /summary)\n"
                "‚Äî –ò—Å–ø–æ–ª—å–∑—É–π /cot_full —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞ CFTC\n"
                "‚Äî /summary —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å—ë –≤–æ–µ–¥–∏–Ω–æ –∏ –¥–µ–ª–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω."
            )
            send_telegram(help_txt, chat_id=chat_id)
            return jsonify({"ok": True})

        if text.startswith("/prices"):
            pr = get_prices()
            send_telegram(fmt_prices(pr), chat_id=chat_id)
            return jsonify({"ok": True})

        if text.startswith("/summary"):
            res = run_once("summary", chat_id=chat_id)
            return jsonify({"ok": True, "result": res})

        if text.startswith("/eia"):
            e = get_eia_weekly()
            if "error" in e:
                send_telegram(f"‚ö†Ô∏è {e['error']}", chat_id=chat_id)
            else:
                send_telegram(e.get("report", "No EIA data available."), chat_id=chat_id)
            return jsonify({"ok": True})

        if text.startswith("/baker"):
            b = get_baker_hughes()
            send_telegram(f"Baker raw:\n<code>{json.dumps(b, ensure_ascii=False)}</code>", chat_id=chat_id)
            return jsonify({"ok": True})

        if text.startswith("/cot"):
            c = get_cftc()
            send_telegram(f"CFTC raw:\n<code>{(c.get('snippet') or '')[:3900]}</code>", chat_id=chat_id)
            return jsonify({"ok": True})
        if text.startswith("/cot_full"):
            c = get_cftc()  # —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç–∞—ë—Ç —Ñ–∞–π–ª –∏–ª–∏ snippet
            snippet = c.get("snippet") or ""
            send_telegram("‚åõ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç CFTC...", chat_id=chat_id)

            # –∑–∞–ø—É—Å–∫–∞–µ–º GPT-–∞–Ω–∞–ª–∏–∑
            ai_report = gpt_analyze_cftc(snippet)
            send_telegram(ai_report, chat_id=chat_id)
            return jsonify({"ok": True})

        if text.startswith("/macro"):
            m = get_fred()
            send_telegram(f"FRED raw:\n<code>{json.dumps(m, ensure_ascii=False)}</code>", chat_id=chat_id)
            return jsonify({"ok": True})

        send_telegram("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help", chat_id=chat_id)
        return jsonify({"ok": True})

    except Exception as e:
        # –Ω–µ —Ä–æ–Ω—è–µ–º –≤–µ–±—Ö—É–∫ ‚Äî –≤—Å–µ–≥–¥–∞ 200
        send_telegram(f"Internal error:\n<code>{traceback.format_exc()[:1500]}</code>")
        return jsonify({"ok": False, "error": str(e)}), 200
# ====== AI (OpenAI) ======
def gpt_analyze(payload, prices):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Å–≤–æ–¥–∫–∏.
    –ï—Å–ª–∏ API-–∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë–º –∫—Ä–∞—Ç–∫–∏–π rule-based –ø–ª–∞–Ω.
    """
    def rule_based():
        px = prices or {}
        wti = px.get("WTI")
        ch = px.get("WTI_change")
        dxy = px.get("DXY_change")
        if wti is None:
            rec = "NEUTRAL"
        else:
            score = (ch or 0) - (dxy or 0)
            rec = "BUY" if score > 0 else "SELL" if score < 0 else "NEUTRAL"
        if wti:
            vol = max(abs(ch or 0), 0.6) / 100.0
            tgt = wti * (1 + (0.018 if rec == "BUY" else -0.018))
            stp = wti * (1 - (0.009 if rec == "BUY" else -0.009))
            tgt = round(tgt, 2)
            stp = round(stp, 2)
        else:
            tgt = stp = None

        lines = [
            f"üî¥ <b>EIA Oil Report Analysis</b>",
            f"üéØ <b>{rec}</b>",
            f"üí∞ –¶–µ–Ω–∞ WTI: {('$'+_num(wti)) if wti else 'N/A'}",
            "",
            "<b>–¢–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω:</b>",
            f"üéØ –¶–µ–ª—å: {('$'+_num(tgt)) if tgt else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}",
            f"‚õî –°—Ç–æ–ø: {('$'+_num(stp)) if stp else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}",
        ]
        return "\n".join(lines)

    if not OPENAI_API_KEY:
        return rule_based()

    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)

        prompt = (
            "–¢—ã –∫—Ä–∞—Ç–∫–æ –∏ —á—ë—Ç–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ä—ã–Ω–æ–∫ –Ω–µ—Ñ—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–∫—Ç—ã –∏–∑ –±–ª–æ–∫–æ–≤ –Ω–∏–∂–µ –∏ –≤—ã–¥–∞–π:\n"
            "1) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é BUY/SELL/NEUTRAL\n"
            "2) –¢–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω: —Ü–µ–ª—å –∏ —Å—Ç–æ–ø (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ, –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É WTI)\n"
            "3) 2‚Äì4 —Ñ–∞–∫—Ç–æ—Ä–∞ (–±—É–ª–ª–µ—Ç—ã) –ø–æ EIA/Baker/CFTC/Macro/Prices\n"
            "4) –ö–æ—Ä–æ—Ç–∫–∏–π –∏—Ç–æ–≥ –Ω–∞ 24‚Äì72 —á–∞—Å–∞.\n\n"
            "–î–∞–Ω–Ω—ã–µ:\n"
            + json.dumps(payload, ensure_ascii=False)
        )

        msg = [
            {"role": "system", "content": "–¢—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ö–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": prompt},
        ]
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=msg,
            temperature=0.25,
            max_tokens=600,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"GPT error: {e}"
# ====== FORMAT MAIN SUMMARY ======
def fmt_summary(payload, analysis=None):
    lines = [f"üßæ <b>Oil Report: SUMMARY</b>", f"üïí {utc_now()}"]

    # ===== BAKER HUGHES =====
    baker = payload.get("baker") or {}

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä fmt_baker ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if 'fmt_baker' in globals():
        lines += ["", fmt_baker(baker)]
    else:
        snippet = baker.get("snippet")
        sentiment = baker.get("sentiment")
        if snippet:
            lines += [
                "\nüõ† <b>Baker Hughes Rig Count</b>",
                f"‚Ä¢ {snippet[:300]}{'...' if len(snippet) > 300 else ''}",
            ]
            if sentiment:
                lines.append(sentiment)
        else:
            lines += ["\nüõ† <b>Baker Hughes:</b> –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã."]

    # ====== EIA ======
    eia = payload.get("eia") or {}
    if isinstance(eia, dict) and "raw" in eia:
        raw = eia["raw"]
        period = eia.get("period", "N/A")

        stocks_val = raw.get("stocks", ["N/A", ""])[0]
        imports_val = raw.get("imports", ["N/A", ""])[0]
        prod_val = raw.get("production", ["N/A", ""])[0]
        stocks_unit = raw.get("stocks", ["", ""])[1]
        imports_unit = raw.get("imports", ["", ""])[1]
        prod_unit = raw.get("production", ["", ""])[1]

        try:
            s_val = float(stocks_val)
            p_val = float(prod_val)
            if s_val > 820000 and p_val > 400:
                sentiment = "üü• <b>Bearish:</b> High inventories & steady output may pressure prices."
            elif s_val < 780000 and p_val < 400:
                sentiment = "üü© <b>Bullish:</b> Falling stocks & reduced output support upside."
            else:
                sentiment = "‚ö™ <b>Neutral:</b> Balanced crude market."
        except Exception:
            sentiment = "‚ö™ <b>Neutral:</b> Data incomplete."

        lines += [
            "\nüì¶ <b>EIA Weekly Crude Snapshot</b>",
            f"‚Ä¢ Period: {period}",
            f"‚Ä¢ Stocks: {_num(stocks_val)} {stocks_unit}",
            f"‚Ä¢ Imports: {_num(imports_val)} {imports_unit}",
            f"‚Ä¢ Production: {_num(prod_val)} {prod_unit}",
            f"{sentiment}",
        ]

    # ====== CFTC ======
    cftc_txt = payload.get("cftc_interpretation")
    if cftc_txt:
        lines += ["\nüìä <b>CFTC</b>", cftc_txt]

    # ====== MACRO ======
    fred = payload.get("fred") or {}
    if isinstance(fred, dict) and fred:
        lines += [
            "\nüè¶ <b>Macro (FRED)</b>",
            f"‚Ä¢ CPI: {_num(fred.get('CPI'))}",
            f"‚Ä¢ Fed Funds: {_num(fred.get('FedRate'))}%",
        ]

    # ====== MARKET ======
    pr = payload.get("prices") or {}
    if isinstance(pr, dict) and pr:
        lines += [
            "\nüíπ <b>Market</b>",
            f"üõ¢ WTI: ${_num(pr.get('WTI'))} (24h {_pct(pr.get('WTI_change'))})",
            f"üíµ DXY: {_num(pr.get('DXY'))} (24h {_pct(pr.get('DXY_change'))})",
        ]

    # ====== AI ======
    if analysis:
        lines += [
            "\nüß† <b>AI Analysis</b>",
            analysis,
        ]

    return "\n".join(lines)
# ====== RUN ======
# ====== RUN ONCE (MAIN SUMMARY BUILDER) ======
def run_once(mode="summary", chat_id=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç (summary) –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    try:
        # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        eia = get_eia_weekly()
        baker = get_baker_hughes()
        cftc = get_cftc()
        fred = get_fred()
        prices = get_prices()

        # –§–æ—Ä–º–∏—Ä—É–µ–º payload
        payload = {
            "eia": eia,
            "baker": baker,
            "cftc": cftc,
            "fred": fred,
            "prices": prices,
        }

        # –¥–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ CFTC (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω snippet)
        payload["cftc_interpretation"] = analyze_cftc_snippet(cftc.get("snippet", ""))

        # –ê–Ω–∞–ª–∏–∑ AI
        analysis = gpt_analyze(payload, prices)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
        report = fmt_summary(payload, analysis=analysis)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å chat_id
        if chat_id:
            send_telegram(report, chat_id=chat_id)

        return report

    except Exception as e:
        err_msg = f"‚ùå run_once error: {e}"
        if chat_id:
            send_telegram(err_msg, chat_id=chat_id)
        return err_msg
if __name__ == "__main__":
    if len(sys.argv) > 1:
        # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: python app.py summary
        mode = sys.argv[1].lower()
        print(json.dumps(run_once(mode), ensure_ascii=False, indent=2))
    else:
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")), debug=False)
        
